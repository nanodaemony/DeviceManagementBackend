


1. 232类型采集数据：
    1. 上电TCP连接服务器,持续发送在线心跳,表明当前采集器在线.
    2. 采集器尝试连接仪器进行数据采集,如果能采集到则直接原文转发至服务器端.
    3. 服务器端解析接收的仪器信息并存储;
    4. 每隔10秒监测一次在线状态,如果30秒没有收到新数据则表示该采集场次号暂停采集,如果5分钟内没有收到数据则直接认定采集结束.
    5. APP可以随时查看当前正在采集的仪器,如果医生有问题就通过APP实时评价录入或记录故障.
    6. 可以对



仪器状态分为：开机、待机、工作中、关机

1. 加入采集的科室位置信息，通过wifi名称来确定。
2. 加入仪器保养 + 维护信息
3.


1. 采集器和平板布置到手术室中,其中4G路由器改变名称为手术室的名称.
2. 平板连接WIFI接入局域网,开启数据采集APP,进入仪器选择界面,访问服务器接口判断服务器是否在线,进行提示(如不在线则提示网络异常).
3. APP获取连接WIFI的名称,这样既可知道当前是在哪个手术室内进行采集. 需要将此信息传给服务器.
4. 医生选择本次采集的医疗仪器,APP仅可选取网口类型仪器. 最多可选6个仪器.
5. 选择完成,根据选择进行仪器界面初始化. 初始化后上传基本信息,然后服务器根据信息为本次采集的所有仪器生成采集场次号,一个仪器一个号.
6. 仅成功分配采集号的仪器才能开始采集. APP点击开始采集或结束采集完成本次采集. 采集过程中医生可以点击为当次采集做仪器评价,完成采集后询问是否进行评价,否则默认好评.
7. 完成采集后退出界面.返回仪器选择界面.

8. 每个数据采集器都有一个唯一编号,绘制与外壳上,编号名称：仪器 + 采集器ID,同时在每个外壳上绘制拨码开关的排布方式.
9. 数据采集器上电后初始化外设(界面显示初始化ing...),然后持续进行WIFI连接(界面显示 Connect Wifi,以及WIFI信息.),连接WIFI需要指定WIFI名称与密码.(这里可以通过WIFI获取位置信息.暂时不做.)
10. 完成WIFI连接(显示WIFI Connect.)的采集器就持续向服务器发起TCP连接请求(显示TCP Connecting...);
11. 完成TCP连接后(显示TCP Connected),向服务器发送基本信息. 包含: 当前采集器的唯一编号(自定义编号+MAC地址), DeviceCode, DeviceSerialNumber, DeviceServiceLife等.
12. 基本信息完成上传后服务器为其生成一个采集场次号. 该场次号会持续使用到下次上电. 中间的全部数据都持续不断发送到服务器中.
13. 采集器硬件功能设计：
    (1) 采用USB供电,通过开关控制工作与否.
    (2) 串口2控制WIFI收发;
    (3) 串口3实现仪器数据收发;
    (4) 串口1实现数据调试.
    (5) RS232实现数据采集.
    (6) 拨码开关改变线序.

14. 采集器任务设计：
    (1) 配置命令接收任务: 主要监听USART2的RX;
    (2) 仪器数据接收任务: 监听USART3的RX;
    (3) 服务器心跳任务: 每隔5S向服务器发送携带采集器自身ID的心跳包,服务器定时检查是否在线.不在线则认为仪器断线.
    (4) WIFI状态监测任务: 定时监测WIFI状态,当状态不对时进行展示,同时暂停数据上传等任务.

15. 服务器串口类数据采集状态判断协议:
    (1) 维护一个UniqueId与InfoDeviceDataCollection的Map;
    (2) 每次接收到仪器数据,都根据该UniqueId更新数据接收时间,用于判断仪器状态;
    (3) 每次接收到心跳数据,都根据该UniqueId更新心跳接收时间,用于判断采集器状态;
            采集器在线: 如果当前时间 - 前一次仪器数据更新时间 > 3600S 说明此时可能仪器已经没有使用了,但是采集器忘关了. 此时将采集状态设置为完成,且采集完成时间为最后一条数据接收的时间;
            采集器重连: 如果重连时间 -

    (4) 10秒检测一次,如果当前时间大于上次心跳更新时间超过60S,说明采集器断线;




服务端设计
1. 公用接口:
    (1) 服务端是否在线接口;
2. 网口类仪器数据采集接口:
    (1) 采集流程控制(存储仪器信息,分配采集场次号,更改当次采集的状态等);
        * 采集开始: 修改开始时间.
        * 采集结束: 修改结束时间. 做一些数据统计: 采集数据条数, 采集时长等信息.
    (2) 网口类仪器数据接收与解析: 解析成对应的类并进行存储.
        * 每个仪器一个Parser对象.
    (3) 串口类仪器接收与解析:
        * 通过TCP进行解析.
        * 维护一个缓存池, 用于记录当前正在采集的信息.
    (4) 非仪器数据类信息采集:
        * 仪器评价记录表;
        * 仪器维修与保养记录表;
        * 其他信息...

3. 业务类接口
    (1) 定时服务:
        * 定时检查网口类仪器的采集状态,如果超过固定时间没有结束采集,则自动变更状态;
        * 定时检查串口类仪器数据的采集流程,对采集状态进行预估与变更.
    (2) WebSocket服务:
        * 推送实时仪器监测数据至前端;

4. 数据分析类接口
    (1) 仪器接入系统总个数统计;
    (2) 接入系统仪器分类统计;
    (3) 按具体仪器类别统计该类别仪器的一些信息;
    (4) 按具体某台仪器统计该仪器的一些信息;
    (5)


采集器上电：
    仪器上电：正常发送数据+心跳数据
    仪器没上电：正常发送心跳数据（心跳数据可能发一晚上），每次服务器会返回一个时间戳给采集器，采集器有个定时任务，计算是否在十分钟内没有接受到仪器数据，如果十分钟内没有仪器数据，
                那么采集器发送结束采集命令到服务器中，收到响应后
    没有仪器数据，如果十分钟没有收到仪器数据，则认定当前采集场次结束，
            此时服务器发一个结束的命令给采集器，采集器情况全部缓存。当仪器重新连接时，

采集器没上电：
    后台十分钟没有收到心跳数据则认定断线，没有采集了。

采集器只需要发送心跳+仪器数据到服务器即可，其余的不管了！！
服务器：
- 采集器心跳数据：携带采集器唯一ID号即可；

- 采集器仪器数据：携带采集器的唯一ID即可；其余信息交给服务器去判断（服务器端维护一个Enum，专门记录已经生产的采集器及其相关信息，
  这样即可根据UniqueID查询到仪器的DeviceCode，CollectionNumber，SerialNumber，ServiceLife等信息）

  采集场次号维护：全程由服务器维护：

  采集器对应的仪器信息：由采集器工作前在服务器端或APP端之间配置，否则直接显示未绑定信息！！如果需要修改绑定仪器信息，则直接通过APP进行修改即可；
  添加一个Collector与MedicalDevice绑定的表；或者在MedicalDevice表中加一列（BondCollector），这样通过UniqueID即可查询对应的仪器信息；





















